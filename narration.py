import requests
from dotenv import load_dotenv
import os
import json
import re
import time

#Get API Key environment variable
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

#UTILITY FUNCTIONS
#Generates script for a given product using GPT API
def generateScript(product, name, context):
    print("Generating script from GPT API...")
    headers = {
        "Content-Type": "application/json",
        "Authorization": "Bearer " + OPENAI_API_KEY
    }

    data = json.dumps({
        "model": "gpt-3.5-turbo",
        "messages": [
            {
                "role": "system",
                "content": "You are an advertising agency in charge of advertising a product for a client. When you create a script for a video, surround scene descriptions with '//' and if there is any narration, surround what is being said with double curly braces."
            },
            {
                "role": "user",
                "content": f"Create a script for a short video ad for a {product} called {name}. You can use the following as context for the product when generating the script: {context}."
            }
        ],
        "temperature": 0.4
    })

    response = requests.post("https://api.openai.com/v1/chat/completions", headers = headers, data = data)
    # print(response.text)
    print("Script Successfully Generated.")
    return response.text

#Separates narration, scene descriptions from generated script
def parseScript(script):
    print("Parsing generated script for scene descriptions and narration...")
    curly_brace_pattern = r'\{\{(.*?)\}\}'
    double_slash_pattern = r'\/\/(.*?)\/\/'

    scenes = re.findall(double_slash_pattern, script)
    narrations = re.findall(curly_brace_pattern, script)

    print("Script parsed.")
    return scenes, narrations

#Generates audio files for narration from script using OpenAI TTS API
def generateAudio(narrations, filepath):
    print(f"Generating audio files for narration in directory {filepath}...")
    headers = {
        "Content-Type": "application/json",
        "Authorization": "Bearer " + OPENAI_API_KEY
    }
    os.mkdir(filepath)
    fileNum = 1

    for i, narration in enumerate(narrations): 
        print(f'Generating audio file narration{fileNum}...')
        data = json.dumps({
            "model": "tts-1-hd",
            "input": f"{narration}",
            "voice": "alloy"
        })

        response = requests.post("https://api.openai.com/v1/audio/speech", headers = headers, data = data)
        with open (f'{filepath}/narration{fileNum}.mp3', 'wb') as file:
            file.write(response.content)
        if (response.status_code == 200):
            print(f"Audio file narration{fileNum} generated successfully.")
        else:
            print(f"Error generating audio file narration{fileNum}!")
        
        fileNum = fileNum + 1

        #Wait in between requests to avoid rate limiting
        if (i != len(narrations)-1):
            print("Waiting 15 seconds before next request...")
            time.sleep(15)
    print(f"Audio files generated in directory {filepath}.")


#Automatically generates narration audio given product type, product name, and information about the product
def generateNarration(product, name, context):
    #Generate output filepath based on product name
    words = name.split()
    filepath = words[0].lower() + ''.join(word.capitalize() for word in words[1:])

    #Gets scenes and narrations from script generated by GPT API
    scenes, narrations = parseScript(generateScript(product, name, context))

    #Print narrations and scenes for manual checking
    for narration in narrations: 
        print(narration)
    print("---")
    for scene in scenes:
        print(scene)
    
    #Generate audio files from narrations extracted from script
    generateAudio(narrations, filepath)


generateNarration("Laptop", "Pear Laptops", "High quality, durable build, proprietary hardware and software")